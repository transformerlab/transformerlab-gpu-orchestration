# coding: utf-8

"""
    Lattice

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClusterStatusResponse(BaseModel):
    """
    ClusterStatusResponse
    """ # noqa: E501
    cluster_name: StrictStr
    status: StrictStr
    launched_at: Optional[StrictInt] = None
    last_use: Optional[StrictStr] = None
    autostop: Optional[StrictInt] = None
    to_down: Optional[StrictBool] = None
    resources_str: Optional[StrictStr] = None
    user_info: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["cluster_name", "status", "launched_at", "last_use", "autostop", "to_down", "resources_str", "user_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if launched_at (nullable) is None
        # and model_fields_set contains the field
        if self.launched_at is None and "launched_at" in self.model_fields_set:
            _dict['launched_at'] = None

        # set to None if last_use (nullable) is None
        # and model_fields_set contains the field
        if self.last_use is None and "last_use" in self.model_fields_set:
            _dict['last_use'] = None

        # set to None if autostop (nullable) is None
        # and model_fields_set contains the field
        if self.autostop is None and "autostop" in self.model_fields_set:
            _dict['autostop'] = None

        # set to None if to_down (nullable) is None
        # and model_fields_set contains the field
        if self.to_down is None and "to_down" in self.model_fields_set:
            _dict['to_down'] = None

        # set to None if resources_str (nullable) is None
        # and model_fields_set contains the field
        if self.resources_str is None and "resources_str" in self.model_fields_set:
            _dict['resources_str'] = None

        # set to None if user_info (nullable) is None
        # and model_fields_set contains the field
        if self.user_info is None and "user_info" in self.model_fields_set:
            _dict['user_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster_name": obj.get("cluster_name"),
            "status": obj.get("status"),
            "launched_at": obj.get("launched_at"),
            "last_use": obj.get("last_use"),
            "autostop": obj.get("autostop"),
            "to_down": obj.get("to_down"),
            "resources_str": obj.get("resources_str"),
            "user_info": obj.get("user_info")
        })
        return _obj


