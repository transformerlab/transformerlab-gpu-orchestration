# coding: utf-8

"""
    Lattice

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.report_data import ReportData
from typing import Optional, Set
from typing_extensions import Self

class ReportsResponse(BaseModel):
    """
    Response model for reports API
    """ # noqa: E501
    usage: List[ReportData]
    availability: List[ReportData]
    job_success: List[ReportData]
    total_jobs: StrictInt
    successful_jobs: StrictInt
    total_usage_hours: Union[StrictFloat, StrictInt]
    average_availability_percent: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["usage", "availability", "job_success", "total_jobs", "successful_jobs", "total_usage_hours", "average_availability_percent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage (list)
        _items = []
        if self.usage:
            for _item_usage in self.usage:
                if _item_usage:
                    _items.append(_item_usage.to_dict())
            _dict['usage'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in availability (list)
        _items = []
        if self.availability:
            for _item_availability in self.availability:
                if _item_availability:
                    _items.append(_item_availability.to_dict())
            _dict['availability'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in job_success (list)
        _items = []
        if self.job_success:
            for _item_job_success in self.job_success:
                if _item_job_success:
                    _items.append(_item_job_success.to_dict())
            _dict['job_success'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usage": [ReportData.from_dict(_item) for _item in obj["usage"]] if obj.get("usage") is not None else None,
            "availability": [ReportData.from_dict(_item) for _item in obj["availability"]] if obj.get("availability") is not None else None,
            "job_success": [ReportData.from_dict(_item) for _item in obj["job_success"]] if obj.get("job_success") is not None else None,
            "total_jobs": obj.get("total_jobs"),
            "successful_jobs": obj.get("successful_jobs"),
            "total_usage_hours": obj.get("total_usage_hours"),
            "average_availability_percent": obj.get("average_availability_percent")
        })
        return _obj


