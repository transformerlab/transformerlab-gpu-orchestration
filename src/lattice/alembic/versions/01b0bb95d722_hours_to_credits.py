"""hours to credits

Revision ID: 01b0bb95d722
Revises: 0efc3c29b9a7
Create Date: 2025-08-26 15:38:40.068792

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "01b0bb95d722"
down_revision: Union[str, Sequence[str], None] = "0efc3c29b9a7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add new columns as nullable first
    with op.batch_alter_table("gpu_usage_logs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("duration_seconds", sa.Float(), nullable=True))

    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("monthly_credits_per_user", sa.Float(), nullable=True)
        )

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.add_column(sa.Column("credits_used", sa.Float(), nullable=True))
        batch_op.add_column(sa.Column("credits_limit", sa.Float(), nullable=True))

    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("monthly_credits_per_user", sa.Float(), nullable=True)
        )

    # Step 2: Migrate data from old columns to new columns
    connection = op.get_bind()

    # Convert gpu_usage_logs duration_hours to duration_seconds
    connection.execute(
        sa.text("""
        UPDATE gpu_usage_logs 
        SET duration_seconds = duration_hours * 3600 
        WHERE duration_hours IS NOT NULL
    """)
    )

    # Convert organization_quotas gpu_hours to credits (assuming 1:1 ratio, adjust as needed)
    connection.execute(
        sa.text("""
        UPDATE organization_quotas 
        SET monthly_credits_per_user = monthly_gpu_hours_per_user 
        WHERE monthly_gpu_hours_per_user IS NOT NULL
    """)
    )

    # Convert quota_periods gpu_hours to credits
    connection.execute(
        sa.text("""
        UPDATE quota_periods 
        SET credits_used = gpu_hours_used,
             credits_limit = gpu_hours_limit
        WHERE gpu_hours_used IS NOT NULL OR gpu_hours_limit IS NOT NULL
    """)
    )

    # Convert team_quotas gpu_hours to credits
    connection.execute(
        sa.text("""
        UPDATE team_quotas 
        SET monthly_credits_per_user = monthly_gpu_hours_per_user 
        WHERE monthly_gpu_hours_per_user IS NOT NULL
    """)
    )

    # Step 3: Make new columns non-nullable
    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.alter_column("monthly_credits_per_user", nullable=False)

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.alter_column("credits_limit", nullable=False)

    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.alter_column("monthly_credits_per_user", nullable=False)

    # Step 4: Drop old columns
    with op.batch_alter_table("gpu_usage_logs", schema=None) as batch_op:
        batch_op.drop_column("duration_hours")

    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.drop_column("monthly_gpu_hours_per_user")

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.drop_column("gpu_hours_used")
        batch_op.drop_column("gpu_hours_limit")

    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.drop_column("monthly_gpu_hours_per_user")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add old columns as nullable first
    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("monthly_gpu_hours_per_user", sa.FLOAT(), nullable=True)
        )

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.add_column(sa.Column("gpu_hours_limit", sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column("gpu_hours_used", sa.FLOAT(), nullable=True))

    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("monthly_gpu_hours_per_user", sa.FLOAT(), nullable=True)
        )

    with op.batch_alter_table("gpu_usage_logs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("duration_hours", sa.FLOAT(), nullable=True))

    # Step 2: Migrate data back from new columns to old columns
    connection = op.get_bind()

    # Convert back from credits to gpu_hours
    connection.execute(
        sa.text("""
        UPDATE gpu_usage_logs 
        SET duration_hours = duration_seconds / 3600 
        WHERE duration_seconds IS NOT NULL
    """)
    )

    connection.execute(
        sa.text("""
        UPDATE organization_quotas 
        SET monthly_gpu_hours_per_user = monthly_credits_per_user 
        WHERE monthly_credits_per_user IS NOT NULL
    """)
    )

    connection.execute(
        sa.text("""
        UPDATE quota_periods 
        SET gpu_hours_used = credits_used,
             gpu_hours_limit = credits_limit
        WHERE credits_used IS NOT NULL OR credits_limit IS NOT NULL
    """)
    )

    connection.execute(
        sa.text("""
        UPDATE team_quotas 
        SET monthly_gpu_hours_per_user = monthly_credits_per_user 
        WHERE monthly_credits_per_user IS NOT NULL
    """)
    )

    # Step 3: Make old columns non-nullable
    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.alter_column("monthly_gpu_hours_per_user", nullable=False)

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.alter_column("gpu_hours_limit", nullable=False)

    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.alter_column("monthly_gpu_hours_per_user", nullable=False)

    # Step 4: Drop new columns
    with op.batch_alter_table("team_quotas", schema=None) as batch_op:
        batch_op.drop_column("monthly_credits_per_user")

    with op.batch_alter_table("quota_periods", schema=None) as batch_op:
        batch_op.drop_column("credits_limit")
        batch_op.drop_column("credits_used")

    with op.batch_alter_table("organization_quotas", schema=None) as batch_op:
        batch_op.drop_column("monthly_credits_per_user")

    with op.batch_alter_table("gpu_usage_logs", schema=None) as batch_op:
        batch_op.drop_column("duration_seconds")

    # ### end Alembic commands ###
