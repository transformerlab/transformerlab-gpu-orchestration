# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and Deploy Container App to Azure ACI (and optionally Web App)

on:
  push:
    branches:
      - main # This workflow triggers on pushes to the 'main' branch
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

env:
  # --- Common Environment Variables ---
  # Your ACR Login Server (from your current workflow)
  AZURE_CONTAINER_REGISTRY: transformerlabprivate-caerf6a8d5gxfhac.azurecr.io
  # The image name (from your current workflow)
  IMAGE_NAME: ${{ secrets.AzureAppService_ContainerUsername_370f749654814d988edd250c13114975 }}/lattice-staging

  # --- ACI Specific Environment Variables ---
  RESOURCE_GROUP_ACI: lattice-staging # <--- IMPORTANT: Replace with the Azure Resource Group for your ACI
  ACI_NAME: lattice-staging-aci # <--- IMPORTANT: Choose a unique name for your ACI instance
  DNS_LABEL: lattice-staging-app # <--- IMPORTANT: Choose a globally unique DNS label (e.g., lattice-staging-prod)
  CONTAINER_PORT_MAIN: 8000 # <--- IMPORTANT: Your primary application port
  CONTAINER_PORT_JUPYTER: 8888 # <--- IMPORTANT: Your Jupyter Notebook port
  # Add any other ports your container needs, e.g., CONTAINER_PORT_ANOTHER_SERVICE: 9000

jobs:
  build:
    runs-on: 'ubuntu-latest'
    outputs:
      image_tag: ${{ steps.build-and-push.outputs.tags }} # Capture the full image tag for later jobs

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        # Your existing secrets for ACR username/password
        username: ${{ secrets.AzureAppService_ContainerUsername_370f749654814d988edd250c13114975 }}
        password: ${{ secrets.AzureAppService_ContainerPassword_ee70eb5d80d641fc8da6b06767afc8dd }}

    - name: Build and push container image to registry
      id: build-and-push # Assign an ID to this step
      uses: docker/build-push-action@v3
      with:
        push: true
        # The tag is constructed using your ACR, the image name, and github.sha
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        file: ./Dockerfile
        # Add output to capture the tags used for the image
        # outputs: type=raw,lasttag=true

  deploy-to-aci: # New job for ACI deployment
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully
    environment:
      name: 'production' # You can change this environment name if it's different for ACI
    
    steps:
    - name: Log in to Azure for ACI deployment
      uses: azure/login@v2
      with:
        # IMPORTANT: Use the AZURE_CREDENTIALS secret for ACI deployment
        # This secret needs permissions to your Resource Group where ACI will live
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP_ACI }}
        name: ${{ env.ACI_NAME }}
        # Use the image tag generated by the 'build' job
        image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        dns-name-label: ${{ env.DNS_LABEL }}
        # Concatenate all your required ports with spaces
        ports: "${{ env.CONTAINER_PORT_MAIN }} ${{ env.CONTAINER_PORT_JUPYTER }}"
        cpu: 1 # Adjust CPU cores as needed
        memory: 1.5 # Adjust memory in GB as needed
        os-type: Linux
        # Provide registry credentials for ACI to pull the image
        registry-username: ${{ secrets.AzureAppService_ContainerUsername_370f749654814d988edd250c13114975 }}
        registry-password: ${{ secrets.AzureAppService_ContainerPassword_ee70eb5d80d641fc8da6b06767afc8dd }}

        location: westus2 # <--- IMPORTANT: Choose your desired Azure region (e.g., westus2, canadacentral, westeurope)

        # Add any environment variables your container needs
        # environment-variables: |
        #   MY_ENV_VAR_1=value1
        #   MY_ENV_VAR_2=value2
        secure-environment-variables: |
          WORKOS_API_KEY=${{ secrets.WORKOS_API_KEY }}
          WORKOS_CLIENT_ID=${{ secrets.WORKOS_CLIENT_KEY }}

  # Your existing deploy-to-webapp job remains unchanged (optional, you can remove it if you're fully moving to ACI)
  deploy-to-webapp:
    runs-on: ubuntu-latest
    needs: build # This job also depends on the 'build' job
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'lattice-staging-002'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_8f4faecfac704124851cd82c6d3d58cc }}
        images: 'transformerlabprivate-caerf6a8d5gxfhac.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_370f749654814d988edd250c13114975 }}/lattice-staging:${{ github.sha }}'
