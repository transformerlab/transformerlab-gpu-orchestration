# coding: utf-8

"""
    Lattice

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GPUUsageLogResponse(BaseModel):
    """
    GPUUsageLogResponse
    """ # noqa: E501
    id: StrictStr
    organization_id: StrictStr
    user_id: StrictStr
    user_email: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    cluster_name: StrictStr
    job_id: Optional[StrictInt] = None
    gpu_count: StrictInt
    start_time: StrictStr
    end_time: Optional[StrictStr] = None
    duration_hours: Optional[Union[StrictFloat, StrictInt]] = None
    instance_type: Optional[StrictStr] = None
    cloud_provider: Optional[StrictStr] = None
    cost_estimate: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "organization_id", "user_id", "user_email", "user_name", "cluster_name", "job_id", "gpu_count", "start_time", "end_time", "duration_hours", "instance_type", "cloud_provider", "cost_estimate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GPUUsageLogResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_email (nullable) is None
        # and model_fields_set contains the field
        if self.user_email is None and "user_email" in self.model_fields_set:
            _dict['user_email'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        # set to None if job_id (nullable) is None
        # and model_fields_set contains the field
        if self.job_id is None and "job_id" in self.model_fields_set:
            _dict['job_id'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if duration_hours (nullable) is None
        # and model_fields_set contains the field
        if self.duration_hours is None and "duration_hours" in self.model_fields_set:
            _dict['duration_hours'] = None

        # set to None if instance_type (nullable) is None
        # and model_fields_set contains the field
        if self.instance_type is None and "instance_type" in self.model_fields_set:
            _dict['instance_type'] = None

        # set to None if cloud_provider (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_provider is None and "cloud_provider" in self.model_fields_set:
            _dict['cloud_provider'] = None

        # set to None if cost_estimate (nullable) is None
        # and model_fields_set contains the field
        if self.cost_estimate is None and "cost_estimate" in self.model_fields_set:
            _dict['cost_estimate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GPUUsageLogResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization_id": obj.get("organization_id"),
            "user_id": obj.get("user_id"),
            "user_email": obj.get("user_email"),
            "user_name": obj.get("user_name"),
            "cluster_name": obj.get("cluster_name"),
            "job_id": obj.get("job_id"),
            "gpu_count": obj.get("gpu_count"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "duration_hours": obj.get("duration_hours"),
            "instance_type": obj.get("instance_type"),
            "cloud_provider": obj.get("cloud_provider"),
            "cost_estimate": obj.get("cost_estimate")
        })
        return _obj


