# coding: utf-8

"""
    Lattice

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UserUsageBreakdown(BaseModel):
    """
    UserUsageBreakdown
    """ # noqa: E501
    user_id: StrictStr
    user_email: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    gpu_hours_used: Union[StrictFloat, StrictInt]
    gpu_hours_limit: Union[StrictFloat, StrictInt]
    gpu_hours_remaining: Union[StrictFloat, StrictInt]
    usage_percentage: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["user_id", "user_email", "user_name", "gpu_hours_used", "gpu_hours_limit", "gpu_hours_remaining", "usage_percentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserUsageBreakdown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_email (nullable) is None
        # and model_fields_set contains the field
        if self.user_email is None and "user_email" in self.model_fields_set:
            _dict['user_email'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserUsageBreakdown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "user_email": obj.get("user_email"),
            "user_name": obj.get("user_name"),
            "gpu_hours_used": obj.get("gpu_hours_used"),
            "gpu_hours_limit": obj.get("gpu_hours_limit"),
            "gpu_hours_remaining": obj.get("gpu_hours_remaining"),
            "usage_percentage": obj.get("usage_percentage")
        })
        return _obj


